package com.imaginamos.pruebaapps.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLICATION".
*/
public class ApplicationDao extends AbstractDao<Application, Long> {

    public static final String TABLENAME = "APPLICATION";

    /**
     * Properties of entity Application.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property UrlImageSmall = new Property(2, String.class, "urlImageSmall", false, "URL_IMAGE_SMALL");
        public final static Property UrlImageMedium = new Property(3, String.class, "urlImageMedium", false, "URL_IMAGE_MEDIUM");
        public final static Property UrlImageLarge = new Property(4, String.class, "urlImageLarge", false, "URL_IMAGE_LARGE");
        public final static Property Summary = new Property(5, String.class, "summary", false, "SUMMARY");
        public final static Property Price = new Property(6, Double.class, "price", false, "PRICE");
        public final static Property Currency = new Property(7, String.class, "currency", false, "CURRENCY");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Rights = new Property(9, String.class, "rights", false, "RIGHTS");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(11, String.class, "link", false, "LINK");
        public final static Property IdLabel = new Property(12, String.class, "idLabel", false, "ID_LABEL");
        public final static Property IdNumber = new Property(13, String.class, "idNumber", false, "ID_NUMBER");
        public final static Property BundleId = new Property(14, String.class, "bundleId", false, "BUNDLE_ID");
        public final static Property Artist = new Property(15, String.class, "artist", false, "ARTIST");
        public final static Property ArtistLink = new Property(16, String.class, "artistLink", false, "ARTIST_LINK");
        public final static Property Category = new Property(17, String.class, "category", false, "CATEGORY");
        public final static Property CategoryId = new Property(18, String.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Scheme = new Property(19, String.class, "scheme", false, "SCHEME");
        public final static Property ReleaseDate = new Property(20, String.class, "releaseDate", false, "RELEASE_DATE");
    };


    public ApplicationDao(DaoConfig config) {
        super(config);
    }
    
    public ApplicationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"URL_IMAGE_SMALL\" TEXT," + // 2: urlImageSmall
                "\"URL_IMAGE_MEDIUM\" TEXT," + // 3: urlImageMedium
                "\"URL_IMAGE_LARGE\" TEXT," + // 4: urlImageLarge
                "\"SUMMARY\" TEXT," + // 5: summary
                "\"PRICE\" REAL," + // 6: price
                "\"CURRENCY\" TEXT," + // 7: currency
                "\"TYPE\" TEXT," + // 8: type
                "\"RIGHTS\" TEXT," + // 9: rights
                "\"TITLE\" TEXT," + // 10: title
                "\"LINK\" TEXT," + // 11: link
                "\"ID_LABEL\" TEXT," + // 12: idLabel
                "\"ID_NUMBER\" TEXT," + // 13: idNumber
                "\"BUNDLE_ID\" TEXT," + // 14: bundleId
                "\"ARTIST\" TEXT," + // 15: artist
                "\"ARTIST_LINK\" TEXT," + // 16: artistLink
                "\"CATEGORY\" TEXT," + // 17: category
                "\"CATEGORY_ID\" TEXT," + // 18: categoryId
                "\"SCHEME\" TEXT," + // 19: scheme
                "\"RELEASE_DATE\" TEXT);"); // 20: releaseDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLICATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Application entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String urlImageSmall = entity.getUrlImageSmall();
        if (urlImageSmall != null) {
            stmt.bindString(3, urlImageSmall);
        }
 
        String urlImageMedium = entity.getUrlImageMedium();
        if (urlImageMedium != null) {
            stmt.bindString(4, urlImageMedium);
        }
 
        String urlImageLarge = entity.getUrlImageLarge();
        if (urlImageLarge != null) {
            stmt.bindString(5, urlImageLarge);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(6, summary);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(7, price);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(8, currency);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String rights = entity.getRights();
        if (rights != null) {
            stmt.bindString(10, rights);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(12, link);
        }
 
        String idLabel = entity.getIdLabel();
        if (idLabel != null) {
            stmt.bindString(13, idLabel);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(14, idNumber);
        }
 
        String bundleId = entity.getBundleId();
        if (bundleId != null) {
            stmt.bindString(15, bundleId);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(16, artist);
        }
 
        String artistLink = entity.getArtistLink();
        if (artistLink != null) {
            stmt.bindString(17, artistLink);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(18, category);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(19, categoryId);
        }
 
        String scheme = entity.getScheme();
        if (scheme != null) {
            stmt.bindString(20, scheme);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(21, releaseDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Application readEntity(Cursor cursor, int offset) {
        Application entity = new Application( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // urlImageSmall
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // urlImageMedium
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // urlImageLarge
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // summary
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // currency
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rights
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // link
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // idLabel
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // idNumber
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // bundleId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // artist
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // artistLink
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // category
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // categoryId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // scheme
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // releaseDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Application entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setUrlImageSmall(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrlImageMedium(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrlImageLarge(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSummary(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCurrency(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRights(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLink(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIdLabel(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIdNumber(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBundleId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setArtist(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setArtistLink(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCategory(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCategoryId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setScheme(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setReleaseDate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Application entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Application entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
